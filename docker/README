In this directory are docker resources to run the decko app.

Contents:
Dockerized decko application, for now this is a development setup, production later.  Includes:
   passenger, ruby 2.2.0 and nginx (phusion/passenger-ruby22)
   decko

These commands should result in two locally running development containers:

# you can use a database run from the standard postgres container like this:
#docker pull postges
#docker run --name decko_db --env POSTGRES_PASSWORD=decko28_devPw --env POSTGRES_USER=decko -d postgres

# MySQL is db configured by default in decko now
docker pull mysql
docker run --name decko_db --env MYSQL_HOST= --env MYSQL_ROOT_PASSWORD=decko28_devPw -d mysql


docker pull gerry/decko:latest
# then run decko:
docker run -p IP:80:80 -p IP:443:443 -d --link=decko_db:db --name=deckoapp gerry/decko /sbin/my_init
# and seed it: (why won't it run as development?)
docker exec -ti deckoapp su - app sh -c 'cd deckoapp; decko seed -p; decko console < script/setup.con'

The database password above is in the image, to use a different one, replace the password when running the
database container and run this to configure rails (before doing the seed):
docker exec -ti deckoapp sed -i -e 's/decko28_devPw/your_actual_pw/' /home/app/deckoapp/config/database.yml

To run a quick test, find the IP address of your container and make a request:
docker inspect deckoapp |grep IPA
wget http://172.17.0.141/

The container uses runit, so status/restart nginx with sv command:
docker exec -ti deckoapp sv restart nginx

Postgres client in the container:
docker exec -ti decko_db su - postgres sh -c 'psql'

Save an image with the seeded database:
docker commit decko_db
docker tag <image tag output above> decko_db_seeded

TODO:
export/import data commands
