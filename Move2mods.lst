# decko stuff, leave for now
#./decko/spec/cypress/app_commands/factory_bot.rb:  # ARDEP: exception RecordInvalid
#./decko/spec/cypress/app_commands/log_fail.rb:# ARDEP defined? protected
#./decko/lib/decko/engine.rb:      # ARDEP should be safe, only on-load, maybe also defined?(ActiveRecord) protection needed?
#./decko/lib/decko/generators/decko/templates/config/puma.rb:  # ARDEP: maybe register storage managers with establish_connection action?
#./decko/lib/decko/tasks/db.rake:    # ARDEP: this is all Rails -> AR standard usages, need alternatives in loading data to storage models
#./decko/lib/decko/tasks/decko/seed.rake:    # ARDEP: this is all Rails -> AR standard usages, need alternatives in loading data to storage models
#./decko/lib/decko/tasks/decko.rake:  # ARDEP: this is all Rails -> AR standard usages, need alternatives in loading data to storage models
#./decko/rails/controllers/card_controller.rb:  # ARDEP: exceptions RecordInvalid

#
# I'm setting up to run a series of git mv's after the subdirs are ready in
# my working directory. The original paths with a comment about the nature of
# of the ActiveRecord dependency, and then the pattern is:
#mv <targ directory> <source directory> <list of files to move>
# I'll edit the list into git mv commands and run them on this branch.

#./card/config/initializers/02_patches/active_record.rb:  # ARDEP: configuration (in filename)
#./card/config/initializers/patches.rb:# ARDEP: need to isolate this to named and optionally included place
#mv card/mod/active_record/config/initializers card/config/initializers patches.rb
#mv card/mod/active_record/config/initializers/02_patches card/config/initializers/02_patches active_record.rb


#./card/spec/lib/card/subcards_spec.rb:    # ARDEP: exception RecordInvalid
#./card/spec/lib/card/set/required_field_spec.rb:      # ARDEP: exception RecordInvalid (apparently can't depend on it defined?)
#mv card/mod/active_record/spec/lib/card card/spec/lib/card subcards_spec.rb
#mv card/mod/active_record/set card/spec/lib/card/set/ required_field_spec.rb

# card/mod/core/set/all/collection.rb:    # ARDEP: ::Relation
# card/mod/core/set/all/states.rb:  # ARDEP: new_record? in storage API
# card/mod/core/set/all/abort.rb:    # ARDEP: need a storage API to do this
#mv card/mod/active_record/set/all card/mod/core/set/all collection.rb states.rb abort.rb

#mv card/mod/active_record/spec/set/all card/mod/core/spec/set/all subcards_spec.rb
#mv card/mod/active_record/spec/set/type card/mod/pointer/spec/set/type mirror_list_spec.rb

# leave in history
#./card/mod/history/set/all/history/act_listing.rb:  # ARDEP: Relation
#./card/mod/history/lib/card/act.rb:      # ARDEP: Relation

# card/mod/carrierwave/spec/set/abstract/attachment/cloud_spec.rb:    # ARDEP: exceptions RecordInvalid
# card/mod/carrierwave/spec/set/type/file_spec.rb:      # ARDEP: exceptions RecordInvalid
#mv card/mod/active_record/spec/set/type card/mod/carrierwave/spec/set/abstract cloud_spec.rb
#mv card/mod/active_record/spec/set/type card/mod/carrierwave/spec/set/type mirror_list_spec.rb

#./card/lib/generators/card.rb:    # ARDEP: migration generators
#./card/lib/application_record.rb:# ARDEP: refactor this to a factory for configured storage modules that can store and use ActiveModel

./card/lib/cardio.rb:      # ARDEP: connection object
./card/lib/cardio/schema.rb:        # ARDEP: migrations

#./card/lib/card/model/save_helper.rb:    # ARDEP: note how ! methods here should be the complete interface from Card::Model < ActiveModel when it needs AR methods and features. I think the solution is to have a 'naked' card that is just a Model, and a Card::Storage class that works like formatters to do view stuff. You need to card.to_storage to get the mutation functions used here
#mv card/mod/active_record/lib/card/model card/lib/card/model save_helper.rb

#./card/lib/card/cache/persistent.rb:      # ARDEP: should be ActiveModel and only create AR object to manage storage process
#mv card/mod/fetch/lib/card/cache card/lib/card/cache persistent.rb

#./card/lib/card/migration.rb:  # ARDEP: migration
#mv card/mod/active_record/lib/card card/lib/card migration.rb
#./card/lib/card/codename.rb:        # ARDEP: connection
#mv card/mod/fetch/lib/card card/lib/card codename.rb

#./card/lib/card/director/phases.rb:        # ARDEP: exception RecordInvalid
#./card/lib/card/director/store.rb:      # ARDEP: comments reflect Card::Storage class
#mv card/mod/storage/lib/card/director card/lib/card/director phases.rb store.rb

#./card/lib/card/tasks/card/migrate.rake:#ARDEP: migrations
#mv card/mod/rails/lib/card/tasks/card card/lib/card/tasks/card migrate.rake

#./card/lib/card/query/sql_statement.rb:        # ARDEP: connection
#./card/lib/card/query/clause.rb:      # ARDEP: connection
#./card/lib/card/query/card_query/run.rb:        # ARDEP: connection
#mv card/mod/active_record/lib/card card/lib/card/ query # dir

# ./card/lib/card/error.rb:    # ARDEP: exceptions RecordNotFound, RecordInvalid
# ./card/lib/card/error.rb:    # ARDEP ActionController: exceptions BadRequest, MissingFile
#mv card/mod/active_record/lib/card card/lib/card/ error.rb

